[gd_scene load_steps=8 format=3 uid="uid://b2cjk2rcbd3rm"]

[ext_resource type="Material" uid="uid://c2ocmobwrb8vq" path="res://materials/test_environment_mat.tres" id="2_mgdri"]
[ext_resource type="Shader" path="res://materials/fov_shader.gdshader" id="3_tfekv"]

[sub_resource type="GDScript" id="GDScript_hlyuy"]
script/source = "extends Node3D

class_name CameraScanner

@onready var collision_shape : CollisionShape3D = $DetectionArea3D/CollisionShape3D
@onready var mesh : CSGCylinder3D = $Mesh
@onready var forward_direction : Marker3D = $ForwardDirection

@export var height : float = 15.0
@export var radius : float = 2.0

# Array of Marker3D nodes to look at
@export var markers : Array[Marker3D] = []
var current_marker_index : int = 0
var look_at_threshold : float = 0.1

@export var player : CharacterBody3D
@export var game_manager : GameManager

enum CameraState {
	SCANNING,
	DETECTED,
	OFF
}

var current_state : CameraState = CameraState.SCANNING

func _ready() -> void:
	var angle_rad = atan2(radius, height)  # atan2(y, x) = atan(y/x) but handles all quadrants
	$SpotLight3D.spot_angle = rad_to_deg(angle_rad)
	
	var radius_correction = radius / 4.0
	
	var new_convex_shape : ConvexPolygonShape3D = ConvexPolygonShape3D.new()
	
	# Dynamically build collision shape to match volume body
	var points : PackedVector3Array = PackedVector3Array()
	points.append(Vector3(0, 0, 0))
	points.append(Vector3(radius - radius_correction, 0, -height))
	points.append(Vector3(-radius + radius_correction, 0, -height))
	points.append(Vector3(0, radius - radius_correction, -height))
	points.append(Vector3(0, -radius + radius_correction, -height))
	
	# Set the points for the new shape
	new_convex_shape.set_points(points)

	collision_shape.shape = new_convex_shape
	
# Called every frame
func _process(delta):
	$Lazers.global_rotation.z += 2.0 * delta
	
	if markers.size() == 0:
		return
	
	match current_state:
		CameraState.SCANNING:
			# Get the target marker position
			var target_marker = markers[current_marker_index]
			var target_position = target_marker.global_position
			var direction = (target_position - global_transform.origin).normalized()
			
			# Move forward direction to next target
			forward_direction.global_position = lerp(forward_direction.global_position, target_position, delta)
			
			look_at(forward_direction.global_position)
			
			var forward_dir = (forward_direction.global_transform.origin - global_transform.origin).normalized()
			var dist = forward_dir.distance_to(direction)
			if  dist > -look_at_threshold and dist < look_at_threshold:
				current_marker_index = (current_marker_index + 1) % markers.size()
		CameraState.DETECTED:
			var target_position = player.global_position
			forward_direction.global_position = lerp(forward_direction.global_position, target_position, delta)
			look_at(forward_direction.global_position)
		CameraState.OFF:
			pass

func _input(event: InputEvent) -> void:
	if event is InputEventKey:
		if event.keycode == KEY_E and player.global_position.distance_to(global_position) < 1.0:
			queue_free()

func _on_area_3d_body_entered(body: Node3D) -> void:
	if body.name == \"PlayerDrone\":
		current_state = CameraState.DETECTED
		game_manager.add_detection(get_instance_id())
			

func _on_area_3d_body_exited(body: Node3D) -> void:
	if body.name == \"PlayerDrone\":
		current_state = CameraState.SCANNING
		game_manager.remove_detection(get_instance_id())
"

[sub_resource type="ConvexPolygonShape3D" id="ConvexPolygonShape3D_ptlcl"]
points = PackedVector3Array(0, 0, 0, 3, 0, -15, -3, 0, -15, 0, 3, -15, 0, -3, -15)

[sub_resource type="GDScript" id="GDScript_7kfi7"]
script/source = "extends Node3D

@onready var ray_cast : RayCast3D = $RayCast3D
@onready var mesh : CSGCylinder3D = $CSGCylinder3D

@export var camera : CameraScanner

var initial_height : float
var initial_position_z : float

func _ready() -> void:
	if !camera:
		initial_height = 10.0
	initial_height = -camera.height
	initial_position_z = mesh.position.z
	
	ray_cast.enabled = true
	ray_cast.target_position.z = initial_height
	
	var angle_rad = atan2(camera.radius, camera.height)  # atan2(y, x) = atan(y/x) but handles all quadrants
	rotation.x = angle_rad

func _process(delta: float) -> void:
	if ray_cast.is_colliding():
		var collision_point = ray_cast.get_collision_point()
		var distance = ray_cast.global_transform.origin.distance_to(collision_point)

		mesh.height = distance
		mesh.position.z = -distance / 2.0
		
	else:
		mesh.height = initial_height
		mesh.position.z = initial_position_z
		
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_20acb"]
render_priority = 0
shader = ExtResource("3_tfekv")
shader_parameter/color1 = Color(1, 1, 1, 0.1)
shader_parameter/color2 = Color(1, 1, 1, 1)
shader_parameter/threshold = 0.2
shader_parameter/fresnel_sharpness = 1.0

[sub_resource type="SphereShape3D" id="SphereShape3D_dh37q"]
radius = 2.0

[node name="Camera" type="Node3D"]
script = SubResource("GDScript_hlyuy")

[node name="CameraMesh" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0.25)
size = Vector3(0.3, 0.3, 0.5)
material = ExtResource("2_mgdri")

[node name="SpotLight3D" type="SpotLight3D" parent="."]
light_energy = 5.0
light_volumetric_fog_energy = 0.0
shadow_enabled = true
spot_range = 15.0
spot_attenuation = 0.0
spot_angle = 10.0

[node name="DetectionArea3D" type="Area3D" parent="."]

[node name="CollisionShape3D" type="CollisionShape3D" parent="DetectionArea3D"]
shape = SubResource("ConvexPolygonShape3D_ptlcl")

[node name="ForwardDirection" type="Marker3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -3.191)
top_level = true

[node name="Lazers" type="Node3D" parent="."]

[node name="Lazer_1" type="Node3D" parent="Lazers" node_paths=PackedStringArray("camera")]
transform = Transform3D(1, 0, 0, 0, 0.984808, -0.173648, 0, 0.173648, 0.984808, 0, 0, 0)
script = SubResource("GDScript_7kfi7")
camera = NodePath("../..")

[node name="CSGCylinder3D" type="CSGCylinder3D" parent="Lazers/Lazer_1"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, -7.5)
radius = 0.05
height = 15.0
material = SubResource("ShaderMaterial_20acb")

[node name="RayCast3D" type="RayCast3D" parent="Lazers/Lazer_1"]
target_position = Vector3(0, 0, -15)

[node name="LazerRotationOffset_2" type="Node3D" parent="Lazers"]
transform = Transform3D(-0.5, -0.866025, 0, 0.866025, -0.5, 0, 0, 0, 1, 0, 0, 0)

[node name="Lazer_2" type="Node3D" parent="Lazers/LazerRotationOffset_2" node_paths=PackedStringArray("camera")]
transform = Transform3D(1, 0, 0, 0, 0.984808, -0.173648, 0, 0.173648, 0.984808, 0, 0, 0)
script = SubResource("GDScript_7kfi7")
camera = NodePath("../../..")

[node name="CSGCylinder3D" type="CSGCylinder3D" parent="Lazers/LazerRotationOffset_2/Lazer_2"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, -7.5)
radius = 0.05
height = 15.0
material = SubResource("ShaderMaterial_20acb")

[node name="RayCast3D" type="RayCast3D" parent="Lazers/LazerRotationOffset_2/Lazer_2"]
target_position = Vector3(0, 0, -15)

[node name="LazerRotationOffset_3" type="Node3D" parent="Lazers"]
transform = Transform3D(-0.5, 0.866025, 0, -0.866025, -0.5, 0, 0, 0, 1, 0, 0, 0)

[node name="Lazer_3" type="Node3D" parent="Lazers/LazerRotationOffset_3" node_paths=PackedStringArray("camera")]
transform = Transform3D(1, 0, 0, 0, 0.984808, -0.173648, 0, 0.173648, 0.984808, 0, 0, 0)
script = SubResource("GDScript_7kfi7")
camera = NodePath("../../..")

[node name="CSGCylinder3D" type="CSGCylinder3D" parent="Lazers/LazerRotationOffset_3/Lazer_3"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, -7.5)
radius = 0.05
height = 15.0
material = SubResource("ShaderMaterial_20acb")

[node name="RayCast3D" type="RayCast3D" parent="Lazers/LazerRotationOffset_3/Lazer_3"]
target_position = Vector3(0, 0, -15)

[node name="InteractArea3D" type="Area3D" parent="."]

[node name="CollisionShape3D" type="CollisionShape3D" parent="InteractArea3D"]
shape = SubResource("SphereShape3D_dh37q")

[connection signal="body_entered" from="DetectionArea3D" to="." method="_on_area_3d_body_entered"]
[connection signal="body_exited" from="DetectionArea3D" to="." method="_on_area_3d_body_exited"]
