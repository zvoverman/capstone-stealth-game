[gd_scene load_steps=9 format=3 uid="uid://bapg7j4qlh4ec"]

[ext_resource type="PackedScene" uid="uid://ck5dl85ds4yc3" path="res://detection_fov/detection_fov.tscn" id="2_uxcq4"]
[ext_resource type="Script" uid="uid://bqul13b4jnxoh" path="res://enemy/enemy_navigation.gd" id="3_nord4"]

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_tx4qn"]
radius = 1.0
height = 4.0

[sub_resource type="Shader" id="Shader_ofsxj"]
code = "shader_type spatial;
render_mode blend_mix,
	cull_disabled,
	depth_prepass_alpha,
	shadows_disabled,
	specular_disabled,
	vertex_lighting;

uniform bool affine_mapping = false;
uniform sampler2D albedo : source_color, filter_nearest;
uniform float alpha_scissor : hint_range(0, 1) = 0.5;
uniform float jitter: hint_range(0, 1) = 0.25;
uniform ivec2 resolution = ivec2(320, 240);

vec4 snap_to_position(vec4 base_position)
{
	vec4 snapped_position = base_position;
	snapped_position.xyz = base_position.xyz / base_position.w;

	vec2 snap_resulotion = floor(vec2(resolution) * (1.0 - jitter));
	snapped_position.x = floor(snap_resulotion.x * snapped_position.x) / snap_resulotion.x;
	snapped_position.y = floor(snap_resulotion.y * snapped_position.y) / snap_resulotion.y;

	snapped_position.xyz *= base_position.w;
	return snapped_position;
}

void vertex()
{
	vec4 snapped_position = snap_to_position(PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX, 1.0));
	if (affine_mapping)
	{
		POSITION = snapped_position;
		POSITION /= abs(POSITION.w);
	}
	else
	{
		POSITION = snapped_position;
	}
}

void fragment()
{
	vec4 color_base = COLOR;
	vec4 texture_color = texture(albedo, UV);

	ALBEDO = (color_base * texture_color).rgb;
	ALPHA = texture_color.a * color_base.a;
	ALPHA_SCISSOR_THRESHOLD = alpha_scissor;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ek87m"]
render_priority = 0
shader = SubResource("Shader_ofsxj")
shader_parameter/affine_mapping = false
shader_parameter/alpha_scissor = 0.5
shader_parameter/jitter = 0.25
shader_parameter/resolution = Vector2i(320, 240)

[sub_resource type="CapsuleMesh" id="CapsuleMesh_2mtkv"]
material = SubResource("ShaderMaterial_ek87m")
radius = 1.0
height = 4.0

[sub_resource type="ShaderMaterial" id="ShaderMaterial_lhgeb"]
render_priority = 0
shader = SubResource("Shader_ofsxj")
shader_parameter/affine_mapping = false
shader_parameter/alpha_scissor = 0.5
shader_parameter/jitter = 0.25
shader_parameter/resolution = Vector2i(320, 240)

[sub_resource type="BoxMesh" id="BoxMesh_h3gcj"]
material = SubResource("ShaderMaterial_lhgeb")
size = Vector3(1.2, 0.4, 0.8)

[node name="Enemy" type="RigidBody3D"]
lock_rotation = true
script = ExtResource("3_nord4")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("CapsuleShape3D_tx4qn")

[node name="BodyMesh" type="MeshInstance3D" parent="."]
mesh = SubResource("CapsuleMesh_2mtkv")

[node name="EyeMesh" type="MeshInstance3D" parent="BodyMesh"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.847224, 0.869165)
mesh = SubResource("BoxMesh_h3gcj")
skeleton = NodePath("../..")

[node name="DetectionFOV" parent="." instance=ExtResource("2_uxcq4")]
transform = Transform3D(1, 0, 0, 0, 0.97457, -0.224083, 0, 0.224083, 0.97457, 0, 0.851508, 1.54735)
radius = 6.0

[node name="NavigationAgent3D" type="NavigationAgent3D" parent="."]
path_desired_distance = 3.0
target_desired_distance = 3.0
path_max_distance = 15.01

[connection signal="player_detected" from="DetectionFOV" to="." method="_on_detection_fov_player_detected"]
[connection signal="player_undetected" from="DetectionFOV" to="." method="_on_detection_fov_player_undetected"]
